"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitHub = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const projen_1 = require("projen");
const workflows_model_1 = require("projen/lib/github/workflows-model");
const base_1 = require("../base");
/**
 * GitHub builder implementing all relevant configuration for the project.
 */
class GitHub extends base_1.GitHubBase {
    /**
     * Initializes the GitHub builder.
     * It calls the `initialize()` method immediately after invoking `super(project)`
     * to ensure that all necessary configuration steps are applied.
     * @param project The project to configure GitHub for.
     */
    constructor(project) {
        super(project);
        this.initialize();
    }
    /**
     * File path to GitHub story issue template.
     * @return File path to story issue file.
     * @protected
     */
    get storyIssueFilePath() {
        return '.github/ISSUE_TEMPLATE/story.yml';
    }
    /**
     * @override
     */
    get pullRequestTemplate() {
        return [
            '## Reviewers Checklist',
            '',
            'for complete review list refer to ABS Loop - Review Aspects',
            '',
            '### Organizational Section',
            '',
            '- [ ] PR is assigned to the according story/feature/bug',
            '- [ ] Story/feature/bug is descriptive',
            '- [ ] Story/feature/bug is assigned to according labels',
            '- [ ] Story/feature/bug is assigned to a developer',
            '',
            '### Structure',
            '',
            '- [ ] Readability: Code is easy to understand, with meaningful names for variables, functions, and classes',
            '- [ ] Comments: Meaningful and helpful comments. Code is documented without being over-commented',
            '- [ ] DRY, KISS and YAGNI: Code implements only necessary features; no over-engineering',
            '- [ ] No sensitive data (e.g., passwords, API keys) in the code',
            '- [ ] No major updates for used packages',
            '',
            '### Coding',
            '',
            '- [ ] Model/Binding property changes or renaming does not break the code',
            '- [ ] Model/Binding properties have consistent names (capitalization, lowercase, ..)',
            '- [ ] Type aliases are defined for associations and compositions',
            '- [ ] No hungarian notation (e.g. aList, oModel, ..)',
            '',
            '### Most important (as long as we do not have Test Driven Development in place)',
            '',
            '- [ ] Code is locally tested by developer',
            '',
            '### Second most important',
            '',
            '- [ ] API first: application can be used headless (with the API only)',
            '<!-- Generated by projen. To modify, edit .projenrc.ts and run "npx projen".-->',
        ];
    }
    /**
     * Issue template for the GitHub story configuration.
     * @return Template for the story issue template file.
     * @protected
     */
    get storyIssueTemplate() {
        return [
            'name: ðŸ’¡ Story',
            'description: As a [role], I [want to], [so that]',
            'title: "[STORY] <title>"',
            'labels: ["type: story"]',
            'body:',
            '  - type: textarea',
            '    attributes:',
            '      label: Description',
            "      description: Provide a brief overview of the story, focusing who want's to do what and why.",
            '    validations:',
            '      required: true',
            '# Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
        ];
    }
    /**
     * @override
     */
    get featureIssueTemplate() {
        return [
            'name: ðŸ’¡ Feature',
            'description: Story related feature',
            'title: "[FEATURE] <title>"',
            'labels: ["type: feature"]',
            'body:',
            '  - type: textarea',
            '    attributes:',
            '      label: Description',
            '      description: A description of the feature.',
            '    validations:',
            '      required: true',
            '',
            '  - type: textarea',
            '    attributes:',
            '      label: Task List',
            '      description: Describe the steps to fulfill the feature.',
            '      value: |',
            '        - [ ] My First Task',
            '    validations:',
            '      required: true',
            '# Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
        ];
    }
    /**
     * @override
     */
    get releaseWorkflowOptions() {
        return {
            on: {
                pullRequest: {
                    branches: ['dev'],
                    types: ['closed'],
                },
            },
            job: {
                runsOn: ['ubuntu-latest'],
                permissions: {
                    contents: workflows_model_1.JobPermission.WRITE,
                    pullRequests: workflows_model_1.JobPermission.WRITE,
                },
                steps: [
                    {
                        name: 'Bump version and create release',
                        uses: 'dxfrontier/gh-action-release@main',
                        with: {
                            GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}',
                            BRANCH: 'dev',
                        },
                    },
                ],
            },
        };
    }
    /**
     * Workflow deployment template options for the GitHub configuration.
     * @return Options for deployment workflow
     * @protected
     */
    get deploymentWorkflowOptions() {
        return {
            on: {
                pullRequest: {
                    branches: ['dev'],
                    types: ['closed'],
                },
            },
            job: {
                runsOn: ['ubuntu-latest'],
                permissions: {
                    contents: workflows_model_1.JobPermission.WRITE,
                    pullRequests: workflows_model_1.JobPermission.WRITE,
                },
                steps: [
                    {
                        name: 'Deploy to Cloud Foundry',
                        uses: 'dxfrontier/gh-action-deploy-cf@main',
                        with: {
                            CF_IAS_ORIGIN: '${{ secrets.IAS_ORIGIN }}',
                            CF_API_DEV: '${{ secrets.CF_API_DEV }}',
                            CF_ORG_DEV: '${{ secrets.CF_ORG_DEV }}',
                            CF_SPACE_DEV: '${{ secrets.CF_SPACE_DEV }}',
                            CF_USERNAME_DEV: '${{ secrets.CF_USERNAME_DEV }}',
                            CF_PASSWORD_DEV: '${{ secrets.CF_PASSWORD_DEV }}',
                            CF_API_PROD: '${{ secrets.CF_API_PROD }}',
                            CF_ORG_PROD: '${{ secrets.CF_ORG_PROD }}',
                            CF_SPACE_PROD: '${{ secrets.CF_SPACE_PROD }}',
                            CF_USERNAME_PROD: '${{ secrets.CF_USERNAME_PROD }}',
                            CF_PASSWORD_PROD: '${{ secrets.CF_PASSWORD_PROD }}',
                        },
                    },
                ],
            },
        };
    }
    /**
     * Creates the template file for a GitHub story issue.
     * @protected
     */
    createStoryIssue() {
        new projen_1.TextFile(this.project, this.storyIssueFilePath, {
            lines: this.storyIssueTemplate,
        });
    }
    /**
     * @override
     */
    createStaleWorkflow() { }
    /**
     * Creates the template file for a GitHub deployment workflow.
     * @protected
     */
    createDeploymentWorkflow() {
        const workflow = this.project.github?.addWorkflow('Deployment');
        workflow?.on(this.deploymentWorkflowOptions.on);
        workflow?.addJob('deploy', this.deploymentWorkflowOptions.job);
    }
    /**
     * @override
     */
    addTemplates() {
        super.addTemplates();
        this.createStoryIssue();
        this.createDeploymentWorkflow();
    }
}
exports.GitHub = GitHub;
_a = JSII_RTTI_SYMBOL_1;
GitHub[_a] = { fqn: "@dxfrontier/projen-template-projects.GitHub", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,