"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Husky = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const projen_1 = require("projen");
const base_1 = require("../base");
/**
 * Husky builder implementing all relevant configuration for the project.
 */
class Husky extends base_1.HuskyBase {
    /**
     * Initializes the Husky builder.
     * It calls the `initialize()` method immediately after invoking `super(project)`
     * to ensure that all necessary configuration steps are applied.
     * @param project The project to configure Husky for.
     */
    constructor(project) {
        super(project);
        this.initialize();
    }
    /**
     * File path to the Husky pre-push hook.
     * @return File path to pre-push hook file.
     * @protected
     */
    get prePushFilePath() {
        return '.husky/pre-push';
    }
    /**
     * Pre-push hook template for the Husky configuration.
     * @return Template for the pre-push hook file.
     * @protected
     */
    get prePushTemplate() {
        return ['# Generated by projen.To modify, edit.projenrc.ts and run "npx projen".', '', 'npm run build'];
    }
    /**
     * Creates the template file for the Husky pre-push hook.
     * @protected
     */
    createPrePushHook() {
        new projen_1.TextFile(this.project, this.prePushFilePath, {
            lines: this.prePushTemplate,
        });
    }
    /**
     * @override
     */
    addTemplates() {
        super.addTemplates();
        this.createPrePushHook();
    }
}
exports.Husky = Husky;
_a = JSII_RTTI_SYMBOL_1;
Husky[_a] = { fqn: "@dxfrontier/projen-template-projects.Husky", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVza3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2FwLXNlcnZpY2UvaHVza3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtQ0FBa0M7QUFDbEMsa0NBQTJEO0FBRTNEOztHQUVHO0FBQ0gsTUFBYSxLQUFNLFNBQVEsZ0JBQVM7SUFDbEM7Ozs7O09BS0c7SUFDSCxZQUFZLE9BQThCO1FBQ3hDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQWMsZUFBZTtRQUMzQixPQUFPLGlCQUFpQixDQUFDO0lBQzNCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBYyxlQUFlO1FBQzNCLE9BQU8sQ0FBQyx5RUFBeUUsRUFBRSxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDMUcsQ0FBQztJQUVEOzs7T0FHRztJQUNPLGlCQUFpQjtRQUN6QixJQUFJLGlCQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQy9DLEtBQUssRUFBRSxJQUFJLENBQUMsZUFBZTtTQUM1QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDTyxZQUFZO1FBQ3BCLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDOztBQTlDSCxzQkErQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXh0RmlsZSB9IGZyb20gJ3Byb2plbic7XG5pbXBvcnQgeyBIdXNreUJhc2UsIFR5cGVTY3JpcHRQcm9qZWN0QmFzZSB9IGZyb20gJy4uL2Jhc2UnO1xuXG4vKipcbiAqIEh1c2t5IGJ1aWxkZXIgaW1wbGVtZW50aW5nIGFsbCByZWxldmFudCBjb25maWd1cmF0aW9uIGZvciB0aGUgcHJvamVjdC5cbiAqL1xuZXhwb3J0IGNsYXNzIEh1c2t5IGV4dGVuZHMgSHVza3lCYXNlIHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBIdXNreSBidWlsZGVyLlxuICAgKiBJdCBjYWxscyB0aGUgYGluaXRpYWxpemUoKWAgbWV0aG9kIGltbWVkaWF0ZWx5IGFmdGVyIGludm9raW5nIGBzdXBlcihwcm9qZWN0KWBcbiAgICogdG8gZW5zdXJlIHRoYXQgYWxsIG5lY2Vzc2FyeSBjb25maWd1cmF0aW9uIHN0ZXBzIGFyZSBhcHBsaWVkLlxuICAgKiBAcGFyYW0gcHJvamVjdCBUaGUgcHJvamVjdCB0byBjb25maWd1cmUgSHVza3kgZm9yLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJvamVjdDogVHlwZVNjcmlwdFByb2plY3RCYXNlKSB7XG4gICAgc3VwZXIocHJvamVjdCk7XG4gICAgdGhpcy5pbml0aWFsaXplKCk7XG4gIH1cblxuICAvKipcbiAgICogRmlsZSBwYXRoIHRvIHRoZSBIdXNreSBwcmUtcHVzaCBob29rLlxuICAgKiBAcmV0dXJuIEZpbGUgcGF0aCB0byBwcmUtcHVzaCBob29rIGZpbGUuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgcHJlUHVzaEZpbGVQYXRoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcuaHVza3kvcHJlLXB1c2gnO1xuICB9XG5cbiAgLyoqXG4gICAqIFByZS1wdXNoIGhvb2sgdGVtcGxhdGUgZm9yIHRoZSBIdXNreSBjb25maWd1cmF0aW9uLlxuICAgKiBAcmV0dXJuIFRlbXBsYXRlIGZvciB0aGUgcHJlLXB1c2ggaG9vayBmaWxlLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IHByZVB1c2hUZW1wbGF0ZSgpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFsnIyBHZW5lcmF0ZWQgYnkgcHJvamVuLlRvIG1vZGlmeSwgZWRpdC5wcm9qZW5yYy50cyBhbmQgcnVuIFwibnB4IHByb2plblwiLicsICcnLCAnbnBtIHJ1biBidWlsZCddO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIHRlbXBsYXRlIGZpbGUgZm9yIHRoZSBIdXNreSBwcmUtcHVzaCBob29rLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgY3JlYXRlUHJlUHVzaEhvb2soKTogdm9pZCB7XG4gICAgbmV3IFRleHRGaWxlKHRoaXMucHJvamVjdCwgdGhpcy5wcmVQdXNoRmlsZVBhdGgsIHtcbiAgICAgIGxpbmVzOiB0aGlzLnByZVB1c2hUZW1wbGF0ZSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RlY3RlZCBhZGRUZW1wbGF0ZXMoKTogdm9pZCB7XG4gICAgc3VwZXIuYWRkVGVtcGxhdGVzKCk7XG4gICAgdGhpcy5jcmVhdGVQcmVQdXNoSG9vaygpO1xuICB9XG59XG4iXX0=