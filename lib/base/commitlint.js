"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommitLintBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const projen_1 = require("projen");
const builder_1 = require("./builder");
/**
 * Base class for CommitLint builder implementing all relevant configuration.
 * @abstract
 */
class CommitLintBase extends builder_1.Builder {
    /**
     * Initializes the base CommitLint builder.
     * @param project The project to configure CommitLint for.
     */
    constructor(project) {
        super(project);
    }
    /**
     * File path to the CommitLint configuration.
     * @return File path to config file.
     * @protected
     */
    get filePath() {
        return '.commitlintrc.ts';
    }
    /**
     * Template file for the CommitLint configuration.
     * @return Template for the config file.
     * @protected
     */
    get template() {
        return [
            '// Generated by projen.To modify, edit.projenrc.ts and run "npx projen".',
            '',
            // eslint-disable-next-line prettier/prettier
            "import type { UserConfig } from '@commitlint/types';",
            // eslint-disable-next-line prettier/prettier
            "import { RuleConfigSeverity } from '@commitlint/types';",
            '',
            'const Configuration: UserConfig = {',
            // eslint-disable-next-line prettier/prettier
            "  extends: ['@commitlint/config-conventional'],",
            '  rules: {',
            // eslint-disable-next-line prettier/prettier
            "    'type-enum': [",
            '      RuleConfigSeverity.Error,',
            // eslint-disable-next-line prettier/prettier
            "      'always',",
            // eslint-disable-next-line prettier/prettier
            "      ['build', 'chore', 'ci', 'docs', 'feat', 'fix', 'perf', 'refactor', 'revert', 'style', 'test', 'delete'],",
            '    ],',
            // eslint-disable-next-line prettier/prettier
            "    'scope-empty': [RuleConfigSeverity.Error, 'never'],",
            // eslint-disable-next-line prettier/prettier
            "    'subject-empty': [RuleConfigSeverity.Error, 'never'],",
            '  },',
            // eslint-disable-next-line prettier/prettier
            "  helpUrl: 'https://github.com/conventional-changelog/commitlint/#what-is-commitlint',",
            '};',
            '',
            'export default Configuration;',
        ];
    }
    /**
     * NPM scripts for the CommitLint builder.
     * @return Npm script entries.
     * @protected
     */
    get scripts() {
        return {
            commit: 'commit',
        };
    }
    /**
     * NPM packages to be installed as devDependencies for the CommitLint builder.
     * @return Npm dev dependencies.
     * @protected
     */
    get devDependencies() {
        return [
            '@commitlint/cli',
            '@commitlint/config-conventional',
            '@commitlint/prompt-cli',
            '@commitlint/types',
            'lint-staged',
        ];
    }
    /**
     * Settings to be added to package.json for the CommitLint builder.
     * @return Configuration entries for package.json.
     * @protected
     */
    get npmSettings() {
        return {};
    }
    addTemplates() {
        new projen_1.TextFile(this.project, this.filePath, {
            lines: this.template,
        });
    }
    addSettings() {
        this.project.addFields({
            'lint-staged': this.npmSettings,
        });
    }
    addScripts() {
        for (const [name, command] of Object.entries(this.scripts)) {
            this.project.addTask(name, { exec: command });
        }
    }
    addDevDependencies() {
        this.project.addDevDeps(...this.devDependencies);
    }
}
exports.CommitLintBase = CommitLintBase;
_a = JSII_RTTI_SYMBOL_1;
CommitLintBase[_a] = { fqn: "projen-template-projects.CommitLintBase", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWl0bGludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iYXNlL2NvbW1pdGxpbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtQ0FBa0M7QUFDbEMsdUNBQW9DO0FBSXBDOzs7R0FHRztBQUNILE1BQXNCLGNBQWUsU0FBUSxpQkFBTztJQUNsRDs7O09BR0c7SUFDSCxZQUFZLE9BQThCO1FBQ3hDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQWMsUUFBUTtRQUNwQixPQUFPLGtCQUFrQixDQUFDO0lBQzVCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBYyxRQUFRO1FBQ3BCLE9BQU87WUFDTCwwRUFBMEU7WUFDMUUsRUFBRTtZQUNGLDZDQUE2QztZQUM3QyxzREFBc0Q7WUFDdEQsNkNBQTZDO1lBQzdDLHlEQUF5RDtZQUN6RCxFQUFFO1lBQ0YscUNBQXFDO1lBQ3JDLDZDQUE2QztZQUM3QyxpREFBaUQ7WUFDakQsWUFBWTtZQUNaLDZDQUE2QztZQUM3QyxvQkFBb0I7WUFDcEIsaUNBQWlDO1lBQ2pDLDZDQUE2QztZQUM3QyxpQkFBaUI7WUFDakIsNkNBQTZDO1lBQzdDLGlIQUFpSDtZQUNqSCxRQUFRO1lBQ1IsNkNBQTZDO1lBQzdDLHlEQUF5RDtZQUN6RCw2Q0FBNkM7WUFDN0MsMkRBQTJEO1lBQzNELE1BQU07WUFDTiw2Q0FBNkM7WUFDN0Msd0ZBQXdGO1lBQ3hGLElBQUk7WUFDSixFQUFFO1lBQ0YsK0JBQStCO1NBQ2hDLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQWMsT0FBTztRQUNuQixPQUFPO1lBQ0wsTUFBTSxFQUFFLFFBQVE7U0FDakIsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBYyxlQUFlO1FBQzNCLE9BQU87WUFDTCxpQkFBaUI7WUFDakIsaUNBQWlDO1lBQ2pDLHdCQUF3QjtZQUN4QixtQkFBbUI7WUFDbkIsYUFBYTtTQUNkLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQWMsV0FBVztRQUN2QixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFUyxZQUFZO1FBQ3BCLElBQUksaUJBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDeEMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3JCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFUyxXQUFXO1FBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQ3JCLGFBQWEsRUFBRSxJQUFJLENBQUMsV0FBVztTQUNoQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRVMsVUFBVTtRQUNsQixLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUMzRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBaUIsRUFBRSxDQUFDLENBQUM7UUFDMUQsQ0FBQztJQUNILENBQUM7SUFFUyxrQkFBa0I7UUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7QUFoSEgsd0NBaUhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGV4dEZpbGUgfSBmcm9tICdwcm9qZW4nO1xuaW1wb3J0IHsgQnVpbGRlciB9IGZyb20gJy4vYnVpbGRlcic7XG5pbXBvcnQgeyBMaW50U3RhZ2VkQ29uZmlnLCBTY3JpcHRzIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgVHlwZVNjcmlwdFByb2plY3RCYXNlIH0gZnJvbSAnLi9wcm9qZWN0JztcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBDb21taXRMaW50IGJ1aWxkZXIgaW1wbGVtZW50aW5nIGFsbCByZWxldmFudCBjb25maWd1cmF0aW9uLlxuICogQGFic3RyYWN0XG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb21taXRMaW50QmFzZSBleHRlbmRzIEJ1aWxkZXIge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGJhc2UgQ29tbWl0TGludCBidWlsZGVyLlxuICAgKiBAcGFyYW0gcHJvamVjdCBUaGUgcHJvamVjdCB0byBjb25maWd1cmUgQ29tbWl0TGludCBmb3IuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9qZWN0OiBUeXBlU2NyaXB0UHJvamVjdEJhc2UpIHtcbiAgICBzdXBlcihwcm9qZWN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWxlIHBhdGggdG8gdGhlIENvbW1pdExpbnQgY29uZmlndXJhdGlvbi5cbiAgICogQHJldHVybiBGaWxlIHBhdGggdG8gY29uZmlnIGZpbGUuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgZmlsZVBhdGgoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJy5jb21taXRsaW50cmMudHMnO1xuICB9XG5cbiAgLyoqXG4gICAqIFRlbXBsYXRlIGZpbGUgZm9yIHRoZSBDb21taXRMaW50IGNvbmZpZ3VyYXRpb24uXG4gICAqIEByZXR1cm4gVGVtcGxhdGUgZm9yIHRoZSBjb25maWcgZmlsZS5cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvdGVjdGVkIGdldCB0ZW1wbGF0ZSgpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICcvLyBHZW5lcmF0ZWQgYnkgcHJvamVuLlRvIG1vZGlmeSwgZWRpdC5wcm9qZW5yYy50cyBhbmQgcnVuIFwibnB4IHByb2plblwiLicsXG4gICAgICAnJyxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllclxuICAgICAgXCJpbXBvcnQgdHlwZSB7IFVzZXJDb25maWcgfSBmcm9tICdAY29tbWl0bGludC90eXBlcyc7XCIsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJldHRpZXIvcHJldHRpZXJcbiAgICAgIFwiaW1wb3J0IHsgUnVsZUNvbmZpZ1NldmVyaXR5IH0gZnJvbSAnQGNvbW1pdGxpbnQvdHlwZXMnO1wiLFxuICAgICAgJycsXG4gICAgICAnY29uc3QgQ29uZmlndXJhdGlvbjogVXNlckNvbmZpZyA9IHsnLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZXR0aWVyL3ByZXR0aWVyXG4gICAgICBcIiAgZXh0ZW5kczogWydAY29tbWl0bGludC9jb25maWctY29udmVudGlvbmFsJ10sXCIsXG4gICAgICAnICBydWxlczogeycsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJldHRpZXIvcHJldHRpZXJcbiAgICAgIFwiICAgICd0eXBlLWVudW0nOiBbXCIsXG4gICAgICAnICAgICAgUnVsZUNvbmZpZ1NldmVyaXR5LkVycm9yLCcsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJldHRpZXIvcHJldHRpZXJcbiAgICAgIFwiICAgICAgJ2Fsd2F5cycsXCIsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJldHRpZXIvcHJldHRpZXJcbiAgICAgIFwiICAgICAgWydidWlsZCcsICdjaG9yZScsICdjaScsICdkb2NzJywgJ2ZlYXQnLCAnZml4JywgJ3BlcmYnLCAncmVmYWN0b3InLCAncmV2ZXJ0JywgJ3N0eWxlJywgJ3Rlc3QnLCAnZGVsZXRlJ10sXCIsXG4gICAgICAnICAgIF0sJyxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllclxuICAgICAgXCIgICAgJ3Njb3BlLWVtcHR5JzogW1J1bGVDb25maWdTZXZlcml0eS5FcnJvciwgJ25ldmVyJ10sXCIsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJldHRpZXIvcHJldHRpZXJcbiAgICAgIFwiICAgICdzdWJqZWN0LWVtcHR5JzogW1J1bGVDb25maWdTZXZlcml0eS5FcnJvciwgJ25ldmVyJ10sXCIsXG4gICAgICAnICB9LCcsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJldHRpZXIvcHJldHRpZXJcbiAgICAgIFwiICBoZWxwVXJsOiAnaHR0cHM6Ly9naXRodWIuY29tL2NvbnZlbnRpb25hbC1jaGFuZ2Vsb2cvY29tbWl0bGludC8jd2hhdC1pcy1jb21taXRsaW50JyxcIixcbiAgICAgICd9OycsXG4gICAgICAnJyxcbiAgICAgICdleHBvcnQgZGVmYXVsdCBDb25maWd1cmF0aW9uOycsXG4gICAgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOUE0gc2NyaXB0cyBmb3IgdGhlIENvbW1pdExpbnQgYnVpbGRlci5cbiAgICogQHJldHVybiBOcG0gc2NyaXB0IGVudHJpZXMuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgc2NyaXB0cygpOiBTY3JpcHRzIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29tbWl0OiAnY29tbWl0JyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIE5QTSBwYWNrYWdlcyB0byBiZSBpbnN0YWxsZWQgYXMgZGV2RGVwZW5kZW5jaWVzIGZvciB0aGUgQ29tbWl0TGludCBidWlsZGVyLlxuICAgKiBAcmV0dXJuIE5wbSBkZXYgZGVwZW5kZW5jaWVzLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IGRldkRlcGVuZGVuY2llcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICdAY29tbWl0bGludC9jbGknLFxuICAgICAgJ0Bjb21taXRsaW50L2NvbmZpZy1jb252ZW50aW9uYWwnLFxuICAgICAgJ0Bjb21taXRsaW50L3Byb21wdC1jbGknLFxuICAgICAgJ0Bjb21taXRsaW50L3R5cGVzJyxcbiAgICAgICdsaW50LXN0YWdlZCcsXG4gICAgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0aW5ncyB0byBiZSBhZGRlZCB0byBwYWNrYWdlLmpzb24gZm9yIHRoZSBDb21taXRMaW50IGJ1aWxkZXIuXG4gICAqIEByZXR1cm4gQ29uZmlndXJhdGlvbiBlbnRyaWVzIGZvciBwYWNrYWdlLmpzb24uXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgbnBtU2V0dGluZ3MoKTogTGludFN0YWdlZENvbmZpZyB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgcHJvdGVjdGVkIGFkZFRlbXBsYXRlcygpOiB2b2lkIHtcbiAgICBuZXcgVGV4dEZpbGUodGhpcy5wcm9qZWN0LCB0aGlzLmZpbGVQYXRoLCB7XG4gICAgICBsaW5lczogdGhpcy50ZW1wbGF0ZSxcbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRTZXR0aW5ncygpOiB2b2lkIHtcbiAgICB0aGlzLnByb2plY3QuYWRkRmllbGRzKHtcbiAgICAgICdsaW50LXN0YWdlZCc6IHRoaXMubnBtU2V0dGluZ3MsXG4gICAgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkU2NyaXB0cygpOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IFtuYW1lLCBjb21tYW5kXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLnNjcmlwdHMpKSB7XG4gICAgICB0aGlzLnByb2plY3QuYWRkVGFzayhuYW1lLCB7IGV4ZWM6IGNvbW1hbmQgYXMgc3RyaW5nIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBhZGREZXZEZXBlbmRlbmNpZXMoKTogdm9pZCB7XG4gICAgdGhpcy5wcm9qZWN0LmFkZERldkRlcHMoLi4udGhpcy5kZXZEZXBlbmRlbmNpZXMpO1xuICB9XG59XG4iXX0=