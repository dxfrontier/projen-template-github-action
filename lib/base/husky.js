"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HuskyBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const projen_1 = require("projen");
const builder_1 = require("./builder");
/**
 * Base class for Husky builder implementing all relevant configuration.
 * @abstract
 */
class HuskyBase extends builder_1.Builder {
    /**
     * Initializes the Husky builder.
     * @param project The project to configure Husky for.
     */
    constructor(project) {
        super(project);
    }
    /**
     * File path to the Husky commit-msg hook.
     * @return File path to commit-msg hook file.
     * @protected
     */
    get commitMsgFilePath() {
        return '.husky/commit-msg';
    }
    /**
     * File path to the Husky pre-commit hook.
     * @return File path to pre-commit hook file.
     * @protected
     */
    get preCommitFilePath() {
        return '.husky/pre-commit';
    }
    /**
     * Commit-msg hook template for the Husky configuration.
     * @return Template for the commit-msg hook file.
     * @protected
     */
    get commitMsgTemplate() {
        return [
            '# Generated by projen.To modify, edit.projenrc.ts and run "npx projen".',
            '',
            'npx --no-install commitlint --edit "$1"',
        ];
    }
    /**
     * Pre-commit hook template for the Husky configuration.
     * @return Template for the pre-commit hook file.
     * @protected
     */
    get preCommitTemplate() {
        return ['# Generated by projen.To modify, edit.projenrc.ts and run "npx projen".', '', 'npx lint-staged'];
    }
    /**
     * NPM scripts for the CommitLint builder.
     * @return Npm script entries.
     * @protected
     */
    get scripts() {
        return {
            prepare: 'husky || true',
        };
    }
    /**
     * NPM packages to be installed as devDependencies for the CommitLint builder.
     * @return Npm dev dependencies.
     * @protected
     */
    get devDependencies() {
        return ['husky@^9.1.7'];
    }
    /**
     * Creates the template file for the Husky commit-msg hook.
     * @protected
     */
    createCommitMsgHook() {
        new projen_1.TextFile(this.project, this.commitMsgFilePath, {
            lines: this.commitMsgTemplate,
        });
    }
    /**
     * Creates the template file for the Husky pre-commit hook.
     * @protected
     */
    createPreCommitHook() {
        new projen_1.TextFile(this.project, this.preCommitFilePath, {
            lines: this.preCommitTemplate,
        });
    }
    /**
     * @override
     */
    addTemplates() {
        this.createCommitMsgHook();
        this.createPreCommitHook();
    }
    /**
     * @override
     */
    addScripts() {
        for (const [name, command] of Object.entries(this.scripts)) {
            this.project.addTask(name, { exec: command });
        }
    }
    /**
     * @override
     */
    addDevDependencies() {
        this.project.addDevDeps(...this.devDependencies);
    }
}
exports.HuskyBase = HuskyBase;
_a = JSII_RTTI_SYMBOL_1;
HuskyBase[_a] = { fqn: "@dxfrontier/projen-template-projects.HuskyBase", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVza3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYmFzZS9odXNreS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG1DQUFrQztBQUNsQyx1Q0FBb0M7QUFJcEM7OztHQUdHO0FBQ0gsTUFBc0IsU0FBVSxTQUFRLGlCQUFPO0lBQzdDOzs7T0FHRztJQUNILFlBQVksT0FBOEI7UUFDeEMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBYyxpQkFBaUI7UUFDN0IsT0FBTyxtQkFBbUIsQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQWMsaUJBQWlCO1FBQzdCLE9BQU8sbUJBQW1CLENBQUM7SUFDN0IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxJQUFjLGlCQUFpQjtRQUM3QixPQUFPO1lBQ0wseUVBQXlFO1lBQ3pFLEVBQUU7WUFDRix5Q0FBeUM7U0FDMUMsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBYyxpQkFBaUI7UUFDN0IsT0FBTyxDQUFDLHlFQUF5RSxFQUFFLEVBQUUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQzVHLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBYyxPQUFPO1FBQ25CLE9BQU87WUFDTCxPQUFPLEVBQUUsZUFBZTtTQUN6QixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxJQUFjLGVBQWU7UUFDM0IsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRDs7O09BR0c7SUFDTyxtQkFBbUI7UUFDM0IsSUFBSSxpQkFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ2pELEtBQUssRUFBRSxJQUFJLENBQUMsaUJBQWlCO1NBQzlCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDTyxtQkFBbUI7UUFDM0IsSUFBSSxpQkFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ2pELEtBQUssRUFBRSxJQUFJLENBQUMsaUJBQWlCO1NBQzlCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNPLFlBQVk7UUFDcEIsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVEOztPQUVHO0lBQ08sVUFBVTtRQUNsQixLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUMzRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBaUIsRUFBRSxDQUFDLENBQUM7UUFDMUQsQ0FBQztJQUNILENBQUM7SUFFRDs7T0FFRztJQUNPLGtCQUFrQjtRQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNuRCxDQUFDOztBQS9HSCw4QkFnSEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXh0RmlsZSB9IGZyb20gJ3Byb2plbic7XG5pbXBvcnQgeyBCdWlsZGVyIH0gZnJvbSAnLi9idWlsZGVyJztcbmltcG9ydCB7IFNjcmlwdHMgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBUeXBlU2NyaXB0UHJvamVjdEJhc2UgfSBmcm9tICcuL3Byb2plY3QnO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIEh1c2t5IGJ1aWxkZXIgaW1wbGVtZW50aW5nIGFsbCByZWxldmFudCBjb25maWd1cmF0aW9uLlxuICogQGFic3RyYWN0XG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBIdXNreUJhc2UgZXh0ZW5kcyBCdWlsZGVyIHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBIdXNreSBidWlsZGVyLlxuICAgKiBAcGFyYW0gcHJvamVjdCBUaGUgcHJvamVjdCB0byBjb25maWd1cmUgSHVza3kgZm9yLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJvamVjdDogVHlwZVNjcmlwdFByb2plY3RCYXNlKSB7XG4gICAgc3VwZXIocHJvamVjdCk7XG4gIH1cblxuICAvKipcbiAgICogRmlsZSBwYXRoIHRvIHRoZSBIdXNreSBjb21taXQtbXNnIGhvb2suXG4gICAqIEByZXR1cm4gRmlsZSBwYXRoIHRvIGNvbW1pdC1tc2cgaG9vayBmaWxlLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IGNvbW1pdE1zZ0ZpbGVQYXRoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcuaHVza3kvY29tbWl0LW1zZyc7XG4gIH1cblxuICAvKipcbiAgICogRmlsZSBwYXRoIHRvIHRoZSBIdXNreSBwcmUtY29tbWl0IGhvb2suXG4gICAqIEByZXR1cm4gRmlsZSBwYXRoIHRvIHByZS1jb21taXQgaG9vayBmaWxlLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IHByZUNvbW1pdEZpbGVQYXRoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcuaHVza3kvcHJlLWNvbW1pdCc7XG4gIH1cblxuICAvKipcbiAgICogQ29tbWl0LW1zZyBob29rIHRlbXBsYXRlIGZvciB0aGUgSHVza3kgY29uZmlndXJhdGlvbi5cbiAgICogQHJldHVybiBUZW1wbGF0ZSBmb3IgdGhlIGNvbW1pdC1tc2cgaG9vayBmaWxlLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IGNvbW1pdE1zZ1RlbXBsYXRlKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1xuICAgICAgJyMgR2VuZXJhdGVkIGJ5IHByb2plbi5UbyBtb2RpZnksIGVkaXQucHJvamVucmMudHMgYW5kIHJ1biBcIm5weCBwcm9qZW5cIi4nLFxuICAgICAgJycsXG4gICAgICAnbnB4IC0tbm8taW5zdGFsbCBjb21taXRsaW50IC0tZWRpdCBcIiQxXCInLFxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogUHJlLWNvbW1pdCBob29rIHRlbXBsYXRlIGZvciB0aGUgSHVza3kgY29uZmlndXJhdGlvbi5cbiAgICogQHJldHVybiBUZW1wbGF0ZSBmb3IgdGhlIHByZS1jb21taXQgaG9vayBmaWxlLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IHByZUNvbW1pdFRlbXBsYXRlKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gWycjIEdlbmVyYXRlZCBieSBwcm9qZW4uVG8gbW9kaWZ5LCBlZGl0LnByb2plbnJjLnRzIGFuZCBydW4gXCJucHggcHJvamVuXCIuJywgJycsICducHggbGludC1zdGFnZWQnXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOUE0gc2NyaXB0cyBmb3IgdGhlIENvbW1pdExpbnQgYnVpbGRlci5cbiAgICogQHJldHVybiBOcG0gc2NyaXB0IGVudHJpZXMuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgc2NyaXB0cygpOiBTY3JpcHRzIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJlcGFyZTogJ2h1c2t5IHx8IHRydWUnLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogTlBNIHBhY2thZ2VzIHRvIGJlIGluc3RhbGxlZCBhcyBkZXZEZXBlbmRlbmNpZXMgZm9yIHRoZSBDb21taXRMaW50IGJ1aWxkZXIuXG4gICAqIEByZXR1cm4gTnBtIGRldiBkZXBlbmRlbmNpZXMuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgZGV2RGVwZW5kZW5jaWVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gWydodXNreUBeOS4xLjcnXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSB0ZW1wbGF0ZSBmaWxlIGZvciB0aGUgSHVza3kgY29tbWl0LW1zZyBob29rLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgY3JlYXRlQ29tbWl0TXNnSG9vaygpOiB2b2lkIHtcbiAgICBuZXcgVGV4dEZpbGUodGhpcy5wcm9qZWN0LCB0aGlzLmNvbW1pdE1zZ0ZpbGVQYXRoLCB7XG4gICAgICBsaW5lczogdGhpcy5jb21taXRNc2dUZW1wbGF0ZSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSB0ZW1wbGF0ZSBmaWxlIGZvciB0aGUgSHVza3kgcHJlLWNvbW1pdCBob29rLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgY3JlYXRlUHJlQ29tbWl0SG9vaygpOiB2b2lkIHtcbiAgICBuZXcgVGV4dEZpbGUodGhpcy5wcm9qZWN0LCB0aGlzLnByZUNvbW1pdEZpbGVQYXRoLCB7XG4gICAgICBsaW5lczogdGhpcy5wcmVDb21taXRUZW1wbGF0ZSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RlY3RlZCBhZGRUZW1wbGF0ZXMoKTogdm9pZCB7XG4gICAgdGhpcy5jcmVhdGVDb21taXRNc2dIb29rKCk7XG4gICAgdGhpcy5jcmVhdGVQcmVDb21taXRIb29rKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90ZWN0ZWQgYWRkU2NyaXB0cygpOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IFtuYW1lLCBjb21tYW5kXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLnNjcmlwdHMpKSB7XG4gICAgICB0aGlzLnByb2plY3QuYWRkVGFzayhuYW1lLCB7IGV4ZWM6IGNvbW1hbmQgYXMgc3RyaW5nIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RlY3RlZCBhZGREZXZEZXBlbmRlbmNpZXMoKTogdm9pZCB7XG4gICAgdGhpcy5wcm9qZWN0LmFkZERldkRlcHMoLi4udGhpcy5kZXZEZXBlbmRlbmNpZXMpO1xuICB9XG59XG4iXX0=